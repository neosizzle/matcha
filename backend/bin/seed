#!/usr/bin/env node

require('dotenv').config();
const enums = require('../constants/enums')
const places = require('./places.json'); // Adjust path as needed
const neo4j_calls = require("../neo4j/calls")

const COUNT = 600
const IMAGES = [
	"public/sample1.png",
	"public/sample2.png",
	"public/sample3.png",
	"public/sample4.png",
	"public/sample5.png",
	"public/sample6.png",
	"public/sample7.png",
	"public/sample8.png",
	"public/sample9.png",
]

const TAGS = [
	"eat",
	"sleep",
	"pickleball",
	"game",
	"chess",
]

function randomChance(probability) {
    // probability should be a number between 0 and 1
    if (probability < 0 || probability > 1) {
        throw new Error('Probability must be between 0 and 1');
    }
    return Math.random() < probability;
}

function getRandomNumber(n) {
    return Math.floor(Math.random() * n);
}

function formatDateToYYMMDD(dateString) {
    const date = new Date(dateString);
    const year = String(date.getFullYear());
    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-based
    const day = String(date.getDate()).padStart(2, '0');

    return `${year}-${month}-${day}`;
}

function getRandomItems(arr) {
    const result = [];
    const totalToSelect = Math.floor(Math.random() * arr.length) + 1; // Random number between 1 and arr.length
    const indices = new Set();

    while (indices.size < totalToSelect) {
        const randomIndex = Math.floor(Math.random() * arr.length);
        indices.add(randomIndex);
    }

    for (let index of indices) {
        result.push(arr[index]);
    }

    return result;
}

async function main() {
	const { default: fetch } = await import('node-fetch');
	const resp = await fetch(`https://randomuser.me/api/?results=${COUNT}`)
	const data = await resp.json()
	if (!resp.ok)
	{
		console.log(data);
		return
	}
	let user_objs = []
	data['results'].forEach(data_user => {
		const place = places[getRandomNumber(places.length)]

		const id = data_user['login']['uuid']
		const images = getRandomItems(IMAGES).join(",")
		const email = `${data_user['login']['uuid']}${data_user['email']}`
		const password = data_user['login']['password']
		const iden_42 = ""
		const verified = true
		const sexuality = enums.Sexuality.BISEXUAL
		const displayname = data_user['login']['username']
		const birthday = formatDateToYYMMDD(data_user['registered']['date'])
		const bio = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras faucibus arcu a lectus malesuada luctus. Donec facilisis arcu accumsan, efficitur nulla in, laoreet nisl. Integer vel cursus justo. Phasellus ullamcorper tortor sed commodo ornare. Sed tempor massa id nisl congue interdum."
		const tags = getRandomItems(TAGS).join(",")
		const enable_auto_location = false
		const location_manual = `${place.name}, ${place.district}, ${place.state}`
		const location_manual_lon = place.coords.lon
		const location_manual_lat = place.coords.lat
		const location_auto_lon = 999
		const location_auto_lat = 999
		const fame_rating = getRandomNumber(100)
		const gender = randomChance(0.33) ? enums.GENDER.NON_BINARY : data_user['gender'] == 'male' ? enums.GENDER.MALE : enums.GENDER.FEMALE

		const user_obj = {
			id,
			images,
			email,
			password,
			iden_42,
			verified,
			sexuality,
			displayname,
			birthday,
			bio,
			tags,
			enable_auto_location,
			location_manual,
			location_manual_lon,
			location_manual_lat,
			location_auto_lon,
			location_auto_lat,
			fame_rating,
			gender
		}
		user_objs.push(user_obj)
	});

	for (let i = 0; i < user_objs.length; i++) {
		console.log(`seeding user ${i} out of ${COUNT}`)
		const user_obj = user_objs[i];
		try {
			await neo4j_calls.create_new_user(user_obj)
		} catch (error) {
			console.log(`seeding user ${i} error, skipping`)
		}
	}
}

main()
.then(() => console.log("OK"))
